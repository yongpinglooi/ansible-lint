- name: CSV Driven Out-of-Place Restore
  hosts: localhost
  gather_facts: false
  tasks:
  - name: Read CSV file
      community.general.read_csv:
        path: "{{ csv_file_path }}"
      register: csv_data

    - name: Log in to Commcell
      commvault.ansible.login:
        webserver_hostname: "{{ http_hostname }}"
        commcell_username: "{{ http_username }}"
        commcell_password: "{{ http_password }}"
        verify_ssl: false

    - name: Process each row in CSV
      vars:
        associate_appID: "{{ item.associate_appID | int }}"
        browseOption_appID: "{{ item.browseOption_appID | int }}"
        destInst_appID: "{{ item.destInst_appID | int }}"
      loop: "{{ csv_data.list }}"
      loop_control:
        label: "{{ item.client_name }}"
      block:

        - name: Start Out-of-Place Restore
          commvault.ansible.request:
            webserver_hostname: "{{ http_hostname }}"
            method: POST
            url: "{0}/commandcenter/api/CreateTask"
            payload:
              taskInfo:
                associations:
                  - clientName: "{{ item.client_name }}"
                    backupsetName: "{{ item.user_backupset }}"
                    subclientName: "{{ item.user_subclient }}"
                    instanceName: "{{ item.instanceName }}"
                    appName: "{{ item.appName }}"
                    applicationId: {{ associate_appID }}
                task:
                  taskType: 1
                  initiatedFrom: 2
                  policyType: 0
                  taskFlags:
                    disabled: false
                subTasks:
                  - subTask:
                      subTaskType: 3
                      operationType: 1001
                    options:
                      restoreOptions:
                        impersonation:
                          useImpersonation: false
                        virtualServerRstOption:
                          isBlockLevelReplication: false
                          isDiskBrowse: false
                          viewType: 0
                          isFileBrowse: true
                        browseOption:
                          backupset:
                            clientName: "{{ item.client_name }}"
                            backupsetName: "{{ item.user_backupset }}"
                            applicationId: {{ browseOption_appID }}
                          timeZone:
                            TimeZoneName: "(UTC+08:00) Kuala Lumpur, Singapore"
                          commCellId: 2
                          mediaOption:
                            proxyForSnapClients:
                              clientName: "{{ item.proxy_client }}"
                        destination:
                          inPlace: false
                          isLegalHold: false
                          noOfStreams: 0
                          destPath:
                            - "{{ item.dest_path }}"
                          destClient:
                            clientName: "{{ item.new_client_name }}"
                          destinationInstance:
                            clientName: "{{ item.new_client_name }}"
                            instanceName: "{{ item.destInst_instName }}"
                            applicationId: {{ destInst_appID }}
                        fileOption:
                          sourceItem:
                            - "{{ item.restore_point }}"
                        commonOptions:
                          restoreToDisk: true
                          unconditionalOverwrite: false
                          preserveLevel: 1
                          stripLevelType: 0
                          stripLevel: 0
                          detectRegularExpression: true
                          wildCard: false
          register: restore_response
          failed_when: restore_response.response.errorCode is defined and restore_response.response.errorCode != 0

        - name: Show restore response
          debug:
            var: restore_response

        - name: Extract Job ID from response
          set_fact:
            restore_job_id: "{{ restore_response.response.jobIds[0] | int }}"
          when:
            - restore_response.response is defined
            - restore_response.response.jobIds is defined
            - restore_response.response.jobIds | length > 0

        - name: Display Job ID
          debug:
            var: restore_job_id
          when: restore_job_id is defined

        - name: Check Job Status
          commvault.ansible.job_status:
            job_id: "{{ restore_job_id }}"
            wait_for_job_completion: true
          when: restore_job_id is defined
          register: job_status_result

        - name: Display Final Job Status
          debug:
            msg: "Job Status: {{ job_status_result.jobStatus }}"
          when: job_status_result is defined
